{
  "address": "0x463910a2eA6a782A454203369A8faA8bA2d72944",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountAIn",
          "type": "uint256"
        }
      ],
      "name": "swapAforB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountBIn",
          "type": "uint256"
        }
      ],
      "name": "swapBforA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenA",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x06bb3e7ca13f6dd542bbc59d54d42a6ee417f1cb3bce7a8dd1c960702f16cd2d",
  "receipt": {
    "to": null,
    "from": "0xF8f15F5a2eA674e637A20727342d8a34b6541C04",
    "contractAddress": "0x463910a2eA6a782A454203369A8faA8bA2d72944",
    "transactionIndex": 1,
    "gasUsed": "964785",
    "logsBloom": "0x
    "blockHash": "0xda97cf52d373c8e8e82c7bd12e6ea7781c32b30c114fee6b91b887856c7fb100",
    "transactionHash": "0x06bb3e7ca13f6dd542bbc59d54d42a6ee417f1cb3bce7a8dd1c960702f16cd2d",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 7560680,
        "transactionHash": "0x06bb3e7ca13f6dd542bbc59d54d42a6ee417f1cb3bce7a8dd1c960702f16cd2d",
        "address": "0x463910a2eA6a782A454203369A8faA8bA2d72944",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f8f15f5a2ea674e637a20727342d8a34b6541c04"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xda97cf52d373c8e8e82c7bd12e6ea7781c32b30c114fee6b91b887856c7fb100"
      }
    ],
    "blockNumber": 7560680,
    "cumulativeGasUsed": "1003275",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF8f15F5a2eA674e637A20727342d8a34b6541C04",
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9"
  ],
  "numDeployments": 2,
  "solcInputHash": "3f03fad8bfc967f80541cd1983cc1b37",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountAIn\",\"type\":\"uint256\"}],\"name\":\"swapAforB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBIn\",\"type\":\"uint256\"}],\"name\":\"swapBforA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"addLiquidity(uint256,uint256)\":{\"details\":\"Add liquidity to the pool. Only the owner can call this function.\",\"params\":{\"amountA\":\"Amount of TokenA to add.\",\"amountB\":\"Amount of TokenB to add.\"}},\"getPrice(address)\":{\"details\":\"Get the price of a token relative to the other.\",\"params\":{\"_token\":\"Address of the token to get the price for.\"},\"returns\":{\"price\":\"The relative price of the token.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeLiquidity(uint256,uint256)\":{\"details\":\"Remove liquidity from the pool. Only the owner can call this function.\",\"params\":{\"amountA\":\"Amount of TokenA to withdraw.\",\"amountB\":\"Amount of TokenB to withdraw.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"swapAforB(uint256)\":{\"details\":\"Swap TokenA for TokenB.\",\"params\":{\"amountAIn\":\"Amount of TokenA to swap.\"}},\"swapBforA(uint256)\":{\"details\":\"Swap TokenB for TokenA.\",\"params\":{\"amountBIn\":\"Amount of TokenB to swap.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleDEX.sol\":\"SimpleDEX\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/SimpleDEX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.26;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract SimpleDEX is Ownable {\\r\\n    address public tokenA;\\r\\n    address public tokenB;\\r\\n    uint256 public reserveA;\\r\\n    uint256 public reserveB;\\r\\n\\r\\n    event LiquidityAdded(address indexed provider, uint256 amountA, uint256 amountB);\\r\\n    event LiquidityRemoved(address indexed provider, uint256 amountA, uint256 amountB);\\r\\n    event Swap(address indexed user, address fromToken, uint256 inputAmount, uint256 outputAmount);\\r\\n\\r\\n    constructor(address initialOwner, address _tokenA, address _tokenB) Ownable(initialOwner) {\\r\\n        tokenA = _tokenA;\\r\\n        tokenB = _tokenB;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add liquidity to the pool. Only the owner can call this function.\\r\\n     * @param amountA Amount of TokenA to add.\\r\\n     * @param amountB Amount of TokenB to add.\\r\\n     */\\r\\n    function addLiquidity(uint256 amountA, uint256 amountB) payable external onlyOwner {\\r\\n        require(amountA > 0 && amountB > 0, \\\"Amounts must be greater than zero\\\");\\r\\n\\r\\n        // Transfer tokens from the owner to the contract\\r\\n        require(IERC20(tokenA).transferFrom(msg.sender, address(this), amountA), \\\"Transfer of TokenA failed\\\");\\r\\n        require(IERC20(tokenB).transferFrom(msg.sender, address(this), amountB), \\\"Transfer of TokenB failed\\\");\\r\\n\\r\\n        // Update reserves\\r\\n        reserveA += amountA;\\r\\n        reserveB += amountB;\\r\\n\\r\\n        emit LiquidityAdded(msg.sender, amountA, amountB);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Swap TokenA for TokenB.\\r\\n     * @param amountAIn Amount of TokenA to swap.\\r\\n     */\\r\\n    function swapAforB(uint256 amountAIn) external {\\r\\n        require(amountAIn > 0, \\\"Amount must be greater than zero\\\");\\r\\n\\r\\n        // Calculate the amount of TokenB to send using the constant product formula\\r\\n        uint256 amountBOut = (amountAIn * reserveB) / (reserveA + amountAIn);\\r\\n        require(amountBOut > 0, \\\"Insufficient output amount\\\");\\r\\n\\r\\n        // Transfer TokenA from user to contract and TokenB to user\\r\\n        require(IERC20(tokenA).transferFrom(msg.sender, address(this), amountAIn), \\\"Transfer of TokenA failed\\\");\\r\\n        require(IERC20(tokenB).transfer(msg.sender, amountBOut), \\\"Transfer of TokenB failed\\\");\\r\\n\\r\\n        // Update reserves\\r\\n        reserveA += amountAIn;\\r\\n        reserveB -= amountBOut;\\r\\n\\r\\n        emit Swap(msg.sender, tokenA, amountAIn, amountBOut);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Swap TokenB for TokenA.\\r\\n     * @param amountBIn Amount of TokenB to swap.\\r\\n     */\\r\\n    function swapBforA(uint256 amountBIn) external {\\r\\n        require(amountBIn > 0, \\\"Amount must be greater than zero\\\");\\r\\n\\r\\n        // Calculate the amount of TokenA to send using the constant product formula\\r\\n        uint256 amountAOut = (amountBIn * reserveA) / (reserveB + amountBIn);\\r\\n        require(amountAOut > 0, \\\"Insufficient output amount\\\");\\r\\n\\r\\n        // Transfer TokenB from user to contract and TokenA to user\\r\\n        require(IERC20(tokenB).transferFrom(msg.sender, address(this), amountBIn), \\\"Transfer of TokenB failed\\\");\\r\\n        require(IERC20(tokenA).transfer(msg.sender, amountAOut), \\\"Transfer of TokenA failed\\\");\\r\\n\\r\\n        // Update reserves\\r\\n        reserveB += amountBIn;\\r\\n        reserveA -= amountAOut;\\r\\n\\r\\n        emit Swap(msg.sender, tokenB, amountBIn, amountAOut);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove liquidity from the pool. Only the owner can call this function.\\r\\n     * @param amountA Amount of TokenA to withdraw.\\r\\n     * @param amountB Amount of TokenB to withdraw.\\r\\n     */\\r\\n    function removeLiquidity(uint256 amountA, uint256 amountB) external onlyOwner {\\r\\n        require(amountA <= reserveA, \\\"Insufficient TokenA reserve\\\");\\r\\n        require(amountB <= reserveB, \\\"Insufficient TokenB reserve\\\");\\r\\n\\r\\n        // Update reserves\\r\\n        reserveA -= amountA;\\r\\n        reserveB -= amountB;\\r\\n\\r\\n        // Transfer tokens back to the owner\\r\\n        require(IERC20(tokenA).transfer(msg.sender, amountA), \\\"Transfer of TokenA failed\\\");\\r\\n        require(IERC20(tokenB).transfer(msg.sender, amountB), \\\"Transfer of TokenB failed\\\");\\r\\n\\r\\n        emit LiquidityRemoved(msg.sender, amountA, amountB);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the price of a token relative to the other.\\r\\n     * @param _token Address of the token to get the price for.\\r\\n     * @return price The relative price of the token.\\r\\n     */\\r\\n    function getPrice(address _token) external view returns (uint256 price) {\\r\\n        if (_token == tokenA) {\\r\\n            require(reserveB > 0, \\\"No liquidity for TokenB\\\");\\r\\n            price = (reserveA * 1e18) / reserveB; // TokenA price in terms of TokenB\\r\\n        } else if (_token == tokenB) {\\r\\n            require(reserveA > 0, \\\"No liquidity for TokenA\\\");\\r\\n            price = (reserveB * 1e18) / reserveA; // TokenB price in terms of TokenA\\r\\n        } else {\\r\\n            revert(\\\"Token not supported\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0xbbb2c40342e2e8a802a8d731a9134bbf7283f9eda630564f7ef9305e09f410c3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c80638da5cb5b116100645780638da5cb5b146101845780639cd441da146101a25780639d7de6b3146101b5578063dc5fa6c5146101d5578063e4f1f70a146101eb578063f2fde38b1461020b57600080fd5b80630fc63d10146100ac57806319e36f3b146100e957806341976e091461010d5780635f64b55b1461012d578063715018a61461014d5780638014a7aa14610164575b600080fd5b3480156100b857600080fd5b506001546100cc906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100f557600080fd5b506100ff60045481565b6040519081526020016100e0565b34801561011957600080fd5b506100ff610128366004610d5c565b61022b565b34801561013957600080fd5b506002546100cc906001600160a01b031681565b34801561015957600080fd5b50610162610381565b005b34801561017057600080fd5b5061016261017f366004610d8c565b610395565b34801561019057600080fd5b506000546001600160a01b03166100cc565b6101626101b0366004610da5565b610606565b3480156101c157600080fd5b506101626101d0366004610da5565b610802565b3480156101e157600080fd5b506100ff60035481565b3480156101f757600080fd5b50610162610206366004610d8c565b610a38565b34801561021757600080fd5b50610162610226366004610d5c565b610ca1565b6001546000906001600160a01b03908116908316036102c35760006004541161029b5760405162461bcd60e51b815260206004820152601760248201527f4e6f206c697175696469747920666f7220546f6b656e4200000000000000000060448201526064015b60405180910390fd5b6004546003546102b390670de0b6b3a7640000610ddd565b6102bd9190610df4565b92915050565b6002546001600160a01b03908116908316036103435760006003541161032b5760405162461bcd60e51b815260206004820152601760248201527f4e6f206c697175696469747920666f7220546f6b656e410000000000000000006044820152606401610292565b6003546004546102b390670de0b6b3a7640000610ddd565b60405162461bcd60e51b8152602060048201526013602482015272151bdad95b881b9bdd081cdd5c1c1bdc9d1959606a1b6044820152606401610292565b610389610cdf565b6103936000610d0c565b565b600081116103e55760405162461bcd60e51b815260206004820181905260248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f6044820152606401610292565b6000816004546103f59190610e16565b6003546104029084610ddd565b61040c9190610df4565b90506000811161045e5760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e74206f757470757420616d6f756e740000000000006044820152606401610292565b6002546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061049290339030908790600401610e29565b6020604051808303816000875af11580156104b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d59190610e4d565b6104f15760405162461bcd60e51b815260040161029290610e6f565b60015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610542573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105669190610e4d565b6105825760405162461bcd60e51b815260040161029290610ea6565b81600460008282546105949190610e16565b9250508190555080600360008282546105ad9190610edd565b9091555050600254604080516001600160a01b03909216825260208201849052810182905233907ffa2dda1cc1b86e41239702756b13effbc1a092b5c57e3ad320fbe4f3b13fe235906060015b60405180910390a25050565b61060e610cdf565b60008211801561061e5750600081115b6106745760405162461bcd60e51b815260206004820152602160248201527f416d6f756e7473206d7573742062652067726561746572207468616e207a65726044820152606f60f81b6064820152608401610292565b6001546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906106a890339030908790600401610e29565b6020604051808303816000875af11580156106c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106eb9190610e4d565b6107075760405162461bcd60e51b815260040161029290610ea6565b6002546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061073b90339030908690600401610e29565b6020604051808303816000875af115801561075a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077e9190610e4d565b61079a5760405162461bcd60e51b815260040161029290610e6f565b81600360008282546107ac9190610e16565b9250508190555080600460008282546107c59190610e16565b9091555050604080518381526020810183905233917fac1d76749e5447b7b16f5ab61447e1bd502f3bb4807af3b28e620d1700a6ee4591016105fa565b61080a610cdf565b60035482111561085c5760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e7420546f6b656e41207265736572766500000000006044820152606401610292565b6004548111156108ae5760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e7420546f6b656e42207265736572766500000000006044820152606401610292565b81600360008282546108c09190610edd565b9250508190555080600460008282546108d99190610edd565b909155505060015460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561092f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109539190610e4d565b61096f5760405162461bcd60e51b815260040161029290610ea6565b60025460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af11580156109c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e49190610e4d565b610a005760405162461bcd60e51b815260040161029290610e6f565b604080518381526020810183905233917f96cd817c6329656790ef8fba7675405193677d39619571282f5e21f3a98cd05991016105fa565b60008111610a885760405162461bcd60e51b815260206004820181905260248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f6044820152606401610292565b600081600354610a989190610e16565b600454610aa59084610ddd565b610aaf9190610df4565b905060008111610b015760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e74206f757470757420616d6f756e740000000000006044820152606401610292565b6001546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610b3590339030908790600401610e29565b6020604051808303816000875af1158015610b54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b789190610e4d565b610b945760405162461bcd60e51b815260040161029290610ea6565b60025460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610be5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c099190610e4d565b610c255760405162461bcd60e51b815260040161029290610e6f565b8160036000828254610c379190610e16565b925050819055508060046000828254610c509190610edd565b9091555050600154604080516001600160a01b03909216825260208201849052810182905233907ffa2dda1cc1b86e41239702756b13effbc1a092b5c57e3ad320fbe4f3b13fe235906060016105fa565b610ca9610cdf565b6001600160a01b038116610cd357604051631e4fbdf760e01b815260006004820152602401610292565b610cdc81610d0c565b50565b6000546001600160a01b031633146103935760405163118cdaa760e01b8152336004820152602401610292565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610d6e57600080fd5b81356001600160a01b0381168114610d8557600080fd5b9392505050565b600060208284031215610d9e57600080fd5b5035919050565b60008060408385031215610db857600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176102bd576102bd610dc7565b600082610e1157634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156102bd576102bd610dc7565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215610e5f57600080fd5b81518015158114610d8557600080fd5b60208082526019908201527f5472616e73666572206f6620546f6b656e42206661696c656400000000000000604082015260600190565b60208082526019908201527f5472616e73666572206f6620546f6b656e41206661696c656400000000000000604082015260600190565b818103818111156102bd576102bd610dc756fea26469706673582212202ce9db7655499e71302ffa0489e36cfb59c93197777b022715cd876fe6fbe03464736f6c634300081a0033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addLiquidity(uint256,uint256)": {
        "details": "Add liquidity to the pool. Only the owner can call this function.",
        "params": {
          "amountA": "Amount of TokenA to add.",
          "amountB": "Amount of TokenB to add."
        }
      },
      "getPrice(address)": {
        "details": "Get the price of a token relative to the other.",
        "params": {
          "_token": "Address of the token to get the price for."
        },
        "returns": {
          "price": "The relative price of the token."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeLiquidity(uint256,uint256)": {
        "details": "Remove liquidity from the pool. Only the owner can call this function.",
        "params": {
          "amountA": "Amount of TokenA to withdraw.",
          "amountB": "Amount of TokenB to withdraw."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "swapAforB(uint256)": {
        "details": "Swap TokenA for TokenB.",
        "params": {
          "amountAIn": "Amount of TokenA to swap."
        }
      },
      "swapBforA(uint256)": {
        "details": "Swap TokenB for TokenA.",
        "params": {
          "amountBIn": "Amount of TokenB to swap."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 263,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "tokenA",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 265,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "tokenB",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 267,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "reserveA",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 269,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "reserveB",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}